CODE DUPLICATION ANALYSIS REPORT - SUMMARY
power-analysis-tool/app.R
Generated: 2025-10-25

================================================================================
KEY FINDINGS
================================================================================

File: app.R
Size: 3,827 lines
Duplication Level: CRITICAL (40-45% of code)

DUPLICATION BREAKDOWN:
- UI Input Patterns: 1,033+ lines (27% of total)
- Server Calculation Logic: 2,660+ lines (69% of total)
- Total Duplicated Content: 3,693+ lines

================================================================================
TOP DUPLICATION HOTSPOTS
================================================================================

1. TAB PAGE STRUCTURE (11 occurrences)
   - Pattern repeats for each analysis tab
   - Lines: ~550 total
   - Consolidation potential: 70%
   - Locations: Lines 161-854

2. RESULT TEXT RENDERING (11 analysis types)
   - Massive if/else-if chain in output$result_text
   - Lines: 980 total
   - Consolidation potential: 80%
   - Locations: Lines 1521-2500

3. POWER CURVE PLOT GENERATION (11 analysis types)
   - Nearly identical plotly code repeated
   - Lines: 880+ total
   - Consolidation potential: 75%
   - Locations: Lines 2767-3400+

4. MISSING DATA ADJUSTMENT BLOCKS (6 occurrences)
   - Identical 35-line conditional block
   - Lines: 210+ total
   - Consolidation potential: 85%
   - Locations: Lines 222-261, 344-383, 459-498, 552-591, 668-707, 758-797

5. NUMERIC INPUT + TOOLTIP (30+ occurrences)
   - Same pattern for every input
   - Lines: 60+ total
   - Consolidation potential: 90%
   - Locations: Throughout UI section

6. TEST TYPE SELECTION (7 occurrences)
   - Identical radioButtons_fixed pattern
   - Lines: 20+ total
   - Consolidation potential: 100%

7. CALCULATION MODE SELECTION (7 occurrences)
   - "Calculate N" vs "Calculate Effect Size"
   - Lines: 35+ total
   - Consolidation potential: 100%

8. EXAMPLE/RESET BUTTON PAIRS (11 occurrences)
   - Identical button structure
   - Lines: 45 total
   - Consolidation potential: 100% (already using data-driven approach)

================================================================================
SPECIFIC DUPLICATION EXAMPLES
================================================================================

PATTERN A: Missing Data Adjustment Block (Repeated 6 times)
Location: Lines 222-261, 344-383, 459-498, 552-591, 668-707, 758-797
Current: ~35 lines × 6 = 210 lines
Proposed: ~60 lines (module) + 6 one-liners = ~66 lines
Savings: 144 lines

PATTERN B: Power Curve Plot Generation (Repeated 11 times)
Location: Lines 2767-3400+ scattered across 11 analysis types
Current: ~80 lines × 11 = 880 lines
Proposed: ~80 lines (helper function) + 11 calls = ~100 lines
Savings: 780 lines

PATTERN C: Result Text Rendering (Repeated 11 times)
Location: Lines 1521-2500 in massive if/else-if chain
Current: 980 lines for 11 analyses
Proposed: ~150 lines (module) + 11 calls = ~161 lines
Savings: 819 lines

PATTERN D: Tab Page Structure (Repeated 11 times)
Location: Lines 161-854 scattered across 11 conditional panels
Current: ~50 lines × 11 = 550 lines
Proposed: ~100 lines (module) + 11 calls = ~111 lines
Savings: 439 lines

================================================================================
REFACTORING IMPACT
================================================================================

BEFORE:
- Total lines: 3,827
- Maintainability: LOW
- Testing: DIFFICULT (monolithic code)
- New feature: 4-5 hours per analysis type
- Bug fixes: Must fix in multiple locations

AFTER:
- Total lines: 2,200-2,400 (40% reduction)
- Maintainability: HIGH
- Testing: EASY (modular, testable units)
- New feature: 1-2 hours per analysis type
- Bug fixes: Single location (modules/helpers)

ESTIMATED SAVINGS:
- UI Input panels (11 tabs): 450 lines
- Missing data blocks (6): 150 lines
- Result text rendering (11): 830 lines
- Power curve plots (11): 760 lines
- Validation logic: 30 lines
- Tab-specific parameters: 140 lines
- TOTAL: 2,360 lines (61% reduction)

================================================================================
RECOMMENDED REFACTORING MODULES
================================================================================

Module 1: missing_data.R (150-180 lines)
- Consolidates 210+ lines of repeated missing data UI
- Used 6 times
- Potential savings: 144 lines

Module 2: input_panel.R (200-250 lines)
- Consolidates UI structure for entire tab
- Used 11 times
- Potential savings: 439 lines

Module 3: power_curve_plot.R (200-250 lines)
- Consolidates power curve generation
- Used 11 times
- Potential savings: 780 lines

Module 4: analysis_result.R (300-350 lines)
- Consolidates result text and table generation
- Used 11 times
- Potential savings: 819 lines

Helper Files:
- calculation_wrappers.R (300-350 lines)
- plot_helpers.R (200-250 lines)
- result_text_helpers.R (200-250 lines)
- validation_helpers.R (100-150 lines)

================================================================================
IMPLEMENTATION PRIORITY
================================================================================

PHASE 1 - FOUNDATION (HIGH IMPACT, LOW EFFORT)
[ ] 1. Create missing_data.R module → saves 144 lines, high reuse
[ ] 2. Create helper function for numeric_input_with_tooltip → saves 60 lines
[ ] 3. Extract validation logic → simplifies 70-line chain

PHASE 2 - CORE MODULES (MEDIUM IMPACT, MEDIUM EFFORT)
[ ] 4. Create input_panel.R module → saves 439 lines, 11 instances
[ ] 5. Create plot_helpers.R → saves 780 lines
[ ] 6. Create result_text_helpers.R → saves 819 lines

PHASE 3 - INTEGRATION (HIGH IMPACT, HIGH EFFORT)
[ ] 7. Refactor app.R UI to use modules
[ ] 8. Refactor server logic to use helpers
[ ] 9. Comprehensive testing and validation

================================================================================
DETAILED REPORT LOCATION
================================================================================

Full analysis available at:
/home/mike/Documents/sharedFolder/power-analysis-tool/docs/004-explanation/003-code-duplication-and-refactoring-analysis.md

This comprehensive report includes:
- 11 sections with detailed analysis
- Code examples for each duplication pattern
- Specific line numbers for all occurrences
- Implementation roadmap with timeline
- Module architecture diagrams
- Before/after code examples
- Quantified impact metrics

================================================================================
